Task0.py
The time complexity of task0.py is O(1). It is a constant time.


Task1.py
Starting with the first loop, it has time complexity of O(c*a): 
- There is a loop which has linear complexity that grows with calls(c) input i.e O(c)
- I have two conditional statement that checks if element is in all_diif_number list.
  To know if element is not in list, the list must be checked element by element till
  the last element. The worst case is O(a), where m is the length of the list
- The complexity of appending a list is O(1), a constant complexity, so it doesn't matter

Second Loop has the time complexity of O(t*a):
- The loop grows as a factor texts length, t. The complexity is O(t).
- The conditional statement remains the same as explained earlier.

The overall complexity is additive in nature since two for-loops were used and they take
in different inputs i.e first loop complexity, O(c*a) + second loop complexity, O(t*a)
O(c*a) + O(t*a) == O(c*a + t*a) == O( (c+t)*a )

The overall complexity is O( (c+t)*a )




Task2.py
The first loop has time complexity of O(c*a):
- The time complexity of the loop is O(c), where "c" is the length of calls (the input)
- For the conditional statements, the "in" and "not in ", the worst-case scenario for the
  condition is O(a), where "a" is the length of all_diff_number. This means it searches 
  through all the elements in list to hit either True or False
- For the dictionary, the time complexity of the adding element to dictionary is constant O(1)
  since I am referencing using key.

The second loop has the complexity of O(d):
- The complexity of the loop depends of the length of the dictionary

The overall complexity is addictive which is O(c*a) + O(d) but c*a is far greater than d
i.e c*a >> d, therefore the time complexity is O(c*a).
Overall complexity is O(c*a)





Task3.py
The first loop that adds the element to the dictionary, dict_calls has linear time complexity 
O(c), where "c" is the length of calls

The second loop has the complexity of O(c) * O(2r + b) == O( c(2r+b) ):
- The first if statement has constant complexity, O(1)
- The conditional statements with "in" and "not in" has the complexity of O(r), where "r" is
  the length of receiving_number list
- The last nested if statement in the loop has complexity of O(b), where "b" is the length of
  called_by_bangalore list
- To get the time complexity of the loop, I added the complexity of each conditional statements
  i.e "if ' ' in receiving_number" is O(r)
      "elif '(' in receiving_number" is O(r)
      "if area_code not in called_by_bangalore" is O(b)
  which gives O(r) + O(r) + O(b) == O(2r + b)

The third loop, the time complexity is O( blog(b) ), where b is the length of called_by_bangalore

The overall complexity is O(c) + O( c(2r+b) ) + O( blog(b) ) which can be written as
O( c +  c(2r+b) + blog(b) ) == O( c(1 + (2r + b)) + blog(b))
To simplify, overall time complexity is O(c(2r + b) + blog(b))


Task4.py
The complexity for converting list to set is O(c), where c is the length of calls

The first for-loop complexity is O(c) * O(n) == O(c*n):
- The complexity of "not in" is O(n), where n is the length of nor_telemarket_number

The second for-lop complexity is O(t) * O(n) == O(t*n):
- The complexity of "not in" is O(n), where n is the length of nor_telemarket_number

The third loop, the time complexity is O(mlog(m)) * O(n) = O(nmlog(m))
- O(mlog(m)) is the complexity to loop through and sort, m is the length of calling_number
- To search if element is in nor_telemarket_number, the complexity is O(n)

The overall complexity is O(nmlog(m)) + O(c) + O(c*n)
O(nmlog(m) + c*n) == O(n * ( mlog(m) + c ))
